<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<book xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
    <info>
        <title>XML Praktikum WS 2016/17 - Dokumentation</title>
        <orgname>Technische Universität München</orgname>
        <author>
            <personname>Joonas Palm, Alexandros Tsakpinis, Nick Schneider, Lovre Petrovic, Togi Dashnyam</personname>
        </author>
    </info>
    <part>
        <title>Erarbeitungsphase</title>
        <chapter>
            <title>Kodierung strukturierter Dokumente: XML und XML-Technologie</title>
            <sect1>
                <title>Organisation</title>
                <para>Jedes Teammitglied hat das Arbeitsblatt zu dieser Thematik eigenständig
                    bearbeitet, da zu diesem Zeitpunkt das Team noch nicht gegründet worden war. Im
                    Rahmen der zweiten Stunde haben wir uns als Team zusammengefunden und erste
                    organisatorische Themen besprochen. </para>
                <para>Dazu gehörten: </para>
                <para>
                    <itemizedlist>
                        <listitem>
                            <para>wöchentliche Meetings</para>
                        </listitem>
                        <listitem>
                            <para>Zeitpunkt der Vorstellung eines Übungsblattes</para>
                        </listitem>
                        <listitem>
                            <para>weiteres Vorgehen</para>
                        </listitem>
                    </itemizedlist>
                </para>
            </sect1>
            <sect1>
                <title>Thematik: Einarbeitung in XML, DTD und CSS</title>
                <para>Insgesamt waren 5 Aufgaben zu bearbeiten.</para>
                <para>Zuallererst sollte sich jeder eigenständig mit der Syntax von XML, DTD und
                    CSS, sowie den Grundlagen von Unicode beschäftigen. Um die syntaktische
                    Korrektheit zu überprüfen und um erste kleinere XML-Dokumente schreiben zu
                    können, installierten wir uns die Arbeitsumgebung unabhängig von einander.
                    Nachdem einige experimentelle XML Strukturen geschrieben und mit CSS-Stylesheets
                    verbunden worden sind, begann die eigentliche Aufgabe. Diese war in drei
                    Teilaufgaben aufgeteilt: <orderedlist>
                        <listitem>
                            <para>Die XML-Struktur - es soll eine Sammlung von Spielen,
                                Aufgabenblättern oder Rezepten entworfen werden.</para>
                        </listitem>
                        <listitem>
                            <para>Die CSS (Gestaltungsanweisung für ein XML-Dokument, ein
                                XML-Dokument kann mehrere Style Sheets haben) - das Stylesheet soll
                                eine Visualisierung der Sammlung darstellen.</para>
                        </listitem>
                        <listitem>
                            <para>Die DTD (Regelsatz, um typgleiche Dokumente zu deklarieren) - die
                                DTD soll bewirken, dass alle Sammlungen die gleiche Struktur
                                besitzen. </para>
                        </listitem>
                    </orderedlist></para>
                <para>Als Endergebnis konnte man die XML-Struktur in einem Browser öffnen und
                    betrachten.</para>
            </sect1>
        </chapter>
        <chapter>
            <title>Namespaces DocBook SVG</title>
            <sect1>
                <title>Organisation</title>
                <para>Wir hatten uns dazu entschieden, das Aufgabenblatt 2 vorzustellen. Damit jeder
                    anständig in die Thematik findet und lernt mit DocBook und SVG umzugehen, haben
                    wir uns dazu entschieden, die Aufgaben vorerst noch nicht zu verteilen. Jedes
                    Teammitglied sollte die Aufgaben selbstständig bearbeiten. Bei einem ersten
                    Meeting haben wir erste Ergebnisse besprochen und eine Vorgehensweise
                    festgelegt. Innerhalb des nächsten Meetings haben wir die Ergbenisse
                    vorgestellt, verglichen und diskutiert. Aus den verschiedenen Lösungsansätzen
                    haben wir ein Teamergebnis herausgearbeitet. Wir hatten festgestellt, dass wir,
                    um stetig unsere Ergebnisse austauschen zu können, ein Version Control System
                    benötigten. Es entstanden folgende Aufgaben, die zu erledigen waren:<itemizedlist>
                        <listitem>
                            <para>Finalisierung des Codes</para>
                        </listitem>
                        <listitem>
                            <para>Dokumentation</para>
                        </listitem>
                        <listitem>
                            <para>Erstellung der Präsentation des Übungsblattes</para>
                        </listitem>
                        <listitem>
                            <para>Aufteilung des Präsentationsinhalts</para>
                        </listitem>
                        <listitem>
                            <para>Einrichtung eines GitHub-Ordners</para>
                        </listitem>
                    </itemizedlist>Diese Aufgaben haben wir auf die einzelnen Gruppenmitglieder
                    verteilt. Damit keine Ungleichheiten auftreten, haben wir uns dazu entschieden,
                    uns auf ein XML-Editor zu einigen. Da oXygen auch in den Übungen benutzt wurde
                    und am wenigsten zusätzliche Plug-Ins benötigte, haben wir uns für oXygen
                    entschieden.</para>
            </sect1>
            <sect1>
                <title>Thematik: Einarbeitung in DocBook und SVG</title>
                <para>Insgesamt wurden 3 Aufgaben bearbeitet.</para>
                <para>Die ersten beiden Aufgaben bestanden aus der Einarbeitung in DocBook und in
                    SVG-Grafiken. Dies wurde im Vorfeld der 3. Aufgabe gemacht. Die 3. Aufgabe
                    besteht im Wesentlichen aus dem Aufbau einer GUI für das Spiel Mancala. Hierzu
                    wurde nach den Spielregeln recherchiert. Die Beschreibung auf der
                    Wikipedia-Seite (https://en.wikipedia.org/wiki/Kalah) dient als wesentliche
                    Grundlage der Implementierung. Der Aufbau der SVG-Datei erfolgte dann separat.
                    Wir hatten uns darauf geeinigt ein klassisches Brettdesign beizubehalten. Das
                    heißt jeweils ein großes Oval auf der linken und rechten Seite, als Mancalas,
                    sowie sechsmal zwei Kreise, als Häuser, zwischen den Mancalas zu positionieren.
                    Um den Spieler, der am Zug ist, zu kennzeichnen, haben wir uns für einen
                    Glow-Effekt entschieden. Darüberhinaus haben die Spieler , als zusätzliche
                    Orientierung, unterschiedliche Farben. Bei der Darstellung der Steine in den
                    Häusern und Mancalas, haben wir aus Rücksicht der Übersicht uns dazu
                    entschieden, in den Häusern die Steine als kleine Punkte anzuzeigen und in den
                    Mancalas als Zahl. </para>
                <para> <inlinemediaobject>
                        <imageobject>
                            <imagedata fileref="MancalaGUI.png" width="95%"/>
                        </imageobject>
                    </inlinemediaobject></para>
                
                <para>Bei der Implementierung wurde auf Verständlichkeit, Redundanzfreiheit,
                    Änderbarkeit und Responsiveness Acht gelegt. Das Responsive Design haben wir
                    durch prozentuale Größe und Position der Elemente erreicht. Verständlichkeit,
                    Redundanzfreiheit und Änderbarkeit haben wir probiert mit einer strukturierten
                    Vererbung zu erfüllen. </para>
            </sect1>
        </chapter>
        <chapter>
            <title>XDM und XPath</title>
            <sect1>
                <title>Organisation</title>
                <para>Ein letztes mal haben wir uns dazu entschieden, jeder die Aufgabe 2 zu bearbeiten. Die erste Aufgabe
                    hat ein Freiwilliger übernommen, damit alle die gleiche Basis haben und die Ergebnisse vergleichbarer sind.
                    Anschließend sind wir, in unserem Teammeeting nach dem gleichen Prozedere vorgegangen, wie bei den letzten 
                    Übungsblättern: Vergleichen, diskutieren, verbessern und eine gemeinsame Lösung schaffen. 
                    Die Erarbeitungsphase neigte sich dem Ende, es gab nur noch ein relevantes Aufgabenblatt
                    und auch die Projektaufgabe wurde bereits veröffentlicht. Das bot erste Diskussionen über Zielsetzungen, den
                    Zeitablauf und ähnliches. Dabei entstand jedoch noch nichts konkretes.
                    
                </para>
            </sect1>
            <sect1>
                <title>Thematik: Praktischer Umgang mit XPath und Entwicklung modularer und
                    konfigurierbarer XSLT-Programme</title>
                <para>Zwei Aufgaben wurden bearbeitet. </para>
                <para>Die Vorbereitung auf das Übungsblatt 3, beschränkte sich auf die Einarbeit in XSLT. Da wir uns bereits
                    am Anfang dazu entschieden hatten, oXygen zu benutzen, mussten wir keinen zusätzlichen
                    XSLT-Prozessor oder eine neue Entwicklungsumgebung installieren.In der ersten Aufgabe haben wir ein Klassendiagramm erstellt. Auf diese Weise konnten wir 
                    die einzelnen Bestandteile und die Zustandsdaten des Mancala-Spiels herausfiltern. 
                    <inlinemediaobject>
                        <imageobject>
                            <imagedata fileref="/Users/nickschneider/xml_lab/exercises/exercise3/classDiagram.png" width ="95%"/>
                        </imageobject>
                    </inlinemediaobject>
                   </para> 
                <para>Diese bildeten die Grundlage für den zweiten Teil der ersten Aufgabe, die Erstellung einer DTD. 
                    Mit dem Klassendiagramm ließ sich nun relativ einfach eine DTD erstellen.
                    Als Vorbereitung der zweiten Aufgabe, haben wir das Ergebnis des zweiten Aufgabenblattes genommen, und 
                    die SVG-Graphik überarbeitet. die Hauptaufgabe war die Entwicklung eines Transformators, der aus den in XML-kodierten Zustandsdaten 
                    eine HTML/SVG-Datei generiert. 
                </para>
            </sect1>
        </chapter>
        <chapter>
            <title>XSLT</title>
            <sect1>
                <title>Organisation</title>
                <para>Das 4. Übungsblatt war maßgeblich für unsere Aufgabenverteilung für das
                    Projekt. Aus den zwei Aufgaben, die vorgegeben waren, haben wir im ersten
                    Schritt mehrere Teilaufgaben gemacht. Die Teilaufgaben konnten wir dann auf die
                    einzelnen Teammitglieder verteilen. Im nächsten Schritt, nachdem jeder seine Aufgaben erfüllt 
                    hatten, konnten wir die einzelnen Code-Stücke zu einem Ganzen zusammenfügen. Damit hatten wir uns 
                    die Grundlage des Projektes gebildet.
                </para>
            </sect1>
            <sect1>
                <title>Thematik: XQuery</title>
                <para>Zwei Aufgaben waren zu bearbeiten. </para>
                <para>Die zwei Aufgaben haben wir, wie in dem Organisationspart beschrieben,
                    unterteilt. So entstand aus der ersten Aufgabe, die beiden Aufgaben:<itemizedlist>
                        <listitem>
                            <para>Erweiterung des Klassendiagramms</para>
                        </listitem>
                        <listitem>
                            <para>Erstellung der Use Cases</para>
                        </listitem>
                    </itemizedlist>Dem Klassendiagramm liegt das Klassendiagramm aus dem 3.
                    Übungsbaltt zu Grunde. Es wurde jedoch um Methoden erweitert, die für die
                    Spielfunktionen essentiell sind. Diese Methoden wurden mithilfe der Use Cases
                    klar identifiziert und später in Aufgabe 2 implementiert. <inlinemediaobject>
                        <imageobject>
                            <imagedata fileref="exercises/exercise4/classDiagramMethods.png"
                                width="95%"/>
                        </imageobject>
                    </inlinemediaobject></para>
                <para> Die folgenden Methoden haben sich aus den Use Cases und dem Klassendiagramm
                    herauskristallisiert:<itemizedlist>
                        <listitem>
                            <para>mancalaGame(): In dieser Methode wird ein neues Mancala Kalah
                                Spielfeld angelegt. Die Mancalas sind mit 0 und die Häuser mit
                                jeweils vier Steinen initialisiert. Zusätzlich soll eine zufällige
                                Spiel-ID generiert werden und der anfangende Spieler gewählt
                                werden.</para>
                        </listitem>
                        <listitem>
                            <para>moveSeeds(ID house): Die Methode soll realisieren, wenn der
                                Spieler auf eines seiner eigenen Häuser klickt, die Anzahl der
                                Steine speichern, das Haus mit null Steinen initialisieren und die
                                Steine im Uhrzeigersinn, mit der Ausnahme des gegnerischen Mancalas,
                                verteilen. </para>
                        </listitem>
                        <listitem>
                            <para>checkSpecialCases(ID lastPit): Es muss hier zwischen zwei Fällen
                                differenziert werden: </para>
                            <para>Der Fall, dass der letzte Stein in ein leeres Haus gelegt wird.
                                Als Folge müssen dieser Stein und die Steine des im
                                gegenüberliegenden Hauses in das Mancala gelegt werden. </para>
                            <para>Der Fall, dass der letzte Stein in das eigene Mancala gelegt wird.
                                So muss darauf geachtet werden, dass der Spieler einen erneuten Zug
                                bekommt.</para>
                        </listitem>
                        <listitem>
                            <para>checkIfGameOver(): Das ist die abschließende Methode. Es muss
                                überprüft werden, ob einer der beiden Spieler keine Steine mehr in
                                all seinen Häusern hat. Tritt dies ein, so ist das Spiel beendet und
                                alle Steine aus den gegnerischen Häusern, werden in das gegnerische
                                Mancala gelegt.</para>
                        </listitem>
                    </itemizedlist>
                </para>
            </sect1>
        </chapter>
        <chapter>
            <title>XQuery</title>
            <sect1>
                <title>Organisation</title>
                <para>Das letzte Übungsblatt war für uns nicht mehr relevant, da wir nicht geplant hatten
                XForms in unser Projekt miteinzubinden. Daher hatten wir die Möglichkeit, die Methoden und Aufgaben
                weiter zu spezifizieren und stetig neue Problematiken zügig zu klären. </para>
            </sect1>
        </chapter>
    </part>
    <part>
        <title>Projektphase</title>
        <chapter>
            <title>Aufgabenverteilung</title>
            <para>Durch die Übungsblätter hatten wir bereits eine gute Grundlage, die wir nun noch
                verfeinern und entsprechend, der Spielfunktionen und des Layouts erweitern mussten.
                Es entstanden dabei folgende Aufgaben:<orderedlist>
                    <listitem>
                        <para>Startbildschirm finalisieren.<orderedlist>
                                <listitem>
                                    <para>Layout anpassen</para>
                                </listitem>
                                <listitem>
                                    <para>Texte und Inhalte einfügen</para>
                                </listitem>
                                <listitem>
                                    <para>Verlinkungen und File-Namen aktualisieren</para>
                                </listitem>
                            </orderedlist></para>
                    </listitem>
                    <listitem>
                        <para>Veränderung der bestehende XQuery Datei, dessen Funktionen durch das
                            Klicken einer der Knöpfe: "Spiel spielen", "Nochmal spielen" oder "Neues
                            Spiel", ausgeführt werden. Darüberhinaus soll sichergestellt werden,
                            dass die Funktionen auch auf dem BaseX-Server laufen. Anschließend soll
                            die Datei in die Controller-Datei, "controller.xquery", eingefügt
                            werden.</para>
                    </listitem>
                    <listitem>
                        <para>Nachdem eine neue Spielinstanz in der Datenbank kreiert wurde, rufe den XSLT
                            Transformator "MancalaTransformator" mit einem web:redirect zu dem Link 
                            "http://localhost:8984/gxf/transform/{$gameId}" auf. Erstelle zusätzlich eine 
                            neue XQuery-Methode, "controller.xquery", die eine Spiel-ID als Parameter hat, 
                            auf den Transformator anwendet und eine HTML-Seite ausgibt.
                        </para>
                    </listitem>
                    <listitem>
                        <para>Modifizieren der XSLT-Datei "MancalaTransformator", sodass die Häuser als 
                            Links angezeigt werden. Hierbei muss darauf geachtet werden, dass die gegnerischen Häuser nicht
                            angeklickt werden können. Sobald ein Haus angeklickt wurde soll der folgende Link geöffnet werden:
                            "http://localhost:8984/gxf/move/{$gameId}/{$houseId}". Zusätzlich muss HTML als 
                            DOCTYPE hinzugefügt werden.
                        </para>
                    </listitem>
                    <listitem>
                        <para>Das Spielfeld-Layout bekommt ein anständiges CSS-Styling (Hintergrundbilder etc.)
                        </para>
                    </listitem>
                    <listitem>
                        <para>Die XQuery-Datei "moveSeeds.xquery" muss so verändert werden, dass sie REST-Aufrufe 
                            eines Klickes auf ein Haus verarbeiten kann. Nachdem die Steine gegen den Uhrzeigersinn verteilt wurden
                            erstelle einen web:redirect zu dem Link "http://localhost:8984/gxf/specialCases/{$gameId}/{$startingPit}/{$numOfStepsToMove}/{$player}"
                            Füge anschließend die web:redirect-Methode der XQuery Datei "controller.xquery" bei.
                        </para>
                    </listitem>
                    <listitem>
                        <para>Vereinigen der Methoden der Spezialfälle des letzten Steins zu einer einzigen XQuery-Datei
                            "specialCases.xquery". Die Datei soll zusätzlich den REST-Aufruf des Links 
                            "http://localhost:8984/gxf/specialCases/{$gameId}/{$startingPit}/{$numOfStepsToMove}/{$player}"
                            verarbeiten. Nachdem die Datenbank überprüft und aktualisiert wurde, soll ein web:redirect zu dem Link
                            "http://localhost:8984/gxf/checkGameOver/{$gameId}" erstellt werden. Dieser soll der XQuery-Datei
                            "controller.xquery" hinzugefügt werden.
                        </para>
                    </listitem>
                    <listitem>
                        <para>Die GameOver XQuery-Datei soll so verändert werden, dass sie den REST-Aufruf weiterleitet an 
                            den Link "http://localhost:8984/gxf/checkGameOver/{$gameId}". Nachdem überprüft
                            wurde ob das Spiel vorbei ist, soll ein neuer web-redirect zu dem Link
                            "http://localhost:8984/gxf/transform/{$gameId}" geöffnet werden.
                            (ähnlich wie in 3.)
                        </para>
                    </listitem>
                    <listitem>
                        <para>Eine neue XQuery-Methode "cleanDatabase" soll erstellt werden, die alle Spielinstanzen, die zuende sind 
                            von der Datenbank löscht.
                        </para>
                    </listitem>
                    <listitem>
                        <para>Ein Help-Button soll erstellt werden, der auf dem Spielfeld-Bildschirm angezeigt wird.
                            Sbald er angelickt wurde soll sich ein Popup öffnen, welches Spielinstruktionen beinhaltet.
                            Der Button soll in der "MancalaTransformator"-Datei implementiert werden.
                        </para>
                    </listitem>
                    <listitem>
                        <para>Die Dokumentation der Arbeitsblätter muss überarbeitet werden und die 
                            der Projektphase angefertigt. Die Applikation soll beschrieben werden, 
                            Teammeetings, Entwürfe, Diagramme etc. angefertig.
                        </para>
                    </listitem>
                </orderedlist></para>
        </chapter>
        <chapter>
            <title>Entwurf</title>
            <para></para>
        </chapter>
        
        <chapter>
            <title>Besonderheiten der Implementierung</title>
            <para></para>
        </chapter>
    </part>
</book>